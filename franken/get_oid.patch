--- a/OpenSSL/crypto/x509ext.c
+++ b/OpenSSL/crypto/x509ext.c
@@ -71,6 +71,30 @@
     return result;
 }
 
+
+static char crypto_X509Extension_get_oid_doc[] = "\n\
+Returns the oid of the extension\n\
+\n\
+@return: A C{str} giving the X509Extension's ASN.1 encoded data.\n\
+";
+
+static PyObject *
+crypto_X509Extension_get_oid(crypto_X509ExtensionObj *self, PyObject *args) {
+	ASN1_OBJECT *obj;
+	char buf[512];
+	int len;
+
+	if (!PyArg_ParseTuple(args, ":get_oid")) {
+		return NULL;
+	}
+
+	/* Returns an internal pointer to x509_extension, not a copy */
+	obj = X509_EXTENSION_get_object(self->x509_extension);
+	len = OBJ_obj2txt(buf, sizeof(buf), obj, 1);
+
+	return PyBytes_FromStringAndSize(buf,len);
+}
+
 /*
  * ADD_METHOD(name) expands to a correct PyMethodDef declaration
  *   {  'name', (PyCFunction)crypto_X509Extension_name, METH_VARARGS }
@@ -83,6 +107,7 @@
     ADD_METHOD(get_critical),
     ADD_METHOD(get_short_name),
     ADD_METHOD(get_data),
+    ADD_METHOD(get_oid),
     { NULL, NULL }
 };
 #undef ADD_METHOD
